<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git</title>
      <link href="2021/03/05/git/"/>
      <url>2021/03/05/git/</url>
      
        <content type="html"><![CDATA[<h1 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install git -g</span><br></pre></td></tr></table></figure><h1 id="git设定"><a href="#git设定" class="headerlink" title="git设定"></a>git设定</h1><p><strong>可在.gitconfig文件直接修改或者使用config命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"&lt;用户名&gt;"</span></span><br><span class="line">$ git config --global user.email <span class="string">"&lt;电子邮件&gt;"</span></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>生成SSH: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">'上面的邮箱'</span></span><br><span class="line"></span><br><span class="line">-t 类型 一般都为rsa</span><br><span class="line">-f 生成的SSH文件名</span><br></pre></td></tr></table></figure><p>将生成的公钥添加到你的github上后进行测试：</p><p>（gitee同理，网址改为git@gitee.com即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>新创建目录后把目录移动到本地Git数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>若已存在的项目则直接git初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>创建README.md（是否创建视需求）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ touch README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure><h2 id="关联远程数据库"><a href="#关联远程数据库" class="headerlink" title="关联远程数据库"></a>关联远程数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;name&gt; &lt;url&gt;</span><br><span class="line">&lt;name&gt; 为远程数据库的别名，一般为origin</span><br><span class="line"></span><br><span class="line">$ git remote add origin https://[your_space_id].backlogtool.com/git/[your_project_key]/test.git</span><br></pre></td></tr></table></figure><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status //确认工作数和索引的状态</span><br></pre></td></tr></table></figure><h1 id="添加进索引区"><a href="#添加进索引区" class="headerlink" title="添加进索引区"></a>添加进索引区</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;file&gt;..  //指定加入索引的文件  </span><br><span class="line">$ git add t.txt b.txt //多个文件用空格分隔</span><br><span class="line">$ git add .  //将所有文件添加到索引</span><br></pre></td></tr></table></figure><h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"提交信息"</span>  //提交代码并发送信息</span><br></pre></td></tr></table></figure><h1 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>GUI查看提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitk</span><br></pre></td></tr></table></figure><h1 id="命令别名设置"><a href="#命令别名设置" class="headerlink" title="命令别名设置"></a>命令别名设置</h1><p>例如commit设置为gc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.gc commit</span><br></pre></td></tr></table></figure><h1 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h1><p>HEAD： 指的是现在使用中的分支的最后一次更新</p><p>HEAD~ ：指定HEAD之前的提交记录        </p><p>HEAD^：指定那个为根目录</p><h1 id="push"><a href="#push" class="headerlink" title="push"></a>push</h1><p>-u :  可以下次推送时省略分支名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin branchName  //同步新的分支到远程数据库</span><br><span class="line"></span><br><span class="line">$ git push  //同步所处分支的代码到远程数据库对应的分支</span><br></pre></td></tr></table></figure><h1 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h1><p>获取远程数据库的变更日志，更新本地数据库（若本地数据有修改，也会同时提交到远程数据库）（多人作业）<br>repository省略时默认为origin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;repository&gt; &lt;refspec&gt;... </span><br><span class="line"></span><br><span class="line">$ git fetch 获取远程数据库的更新内容，并放入FETCH_HEAD中，而不是合并</span><br></pre></td></tr></table></figure><h1 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h1><p>克隆远程数据库（克隆的数据库的变更履历也会被复制）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;repository&gt; &lt;directory&gt;  </span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">clone</span> https://nulab.backlog.jp/git/BLG/tutorial.git tutorial2</span><br></pre></td></tr></table></figure><h1 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h1><p>分支分为： merge分支 (一般为master）和Topic分支</p><p>可简单理解为主分支和其他分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch  //查看git分支</span><br><span class="line">$ git branch  &lt;branchnaem&gt;  //创建新分支</span><br><span class="line">$ git branch -d &lt;branchname&gt;  //删除分支</span><br></pre></td></tr></table></figure><h1 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout  //切换分支</span><br><span class="line">$ git checkout -b branchName  //切换并创建新分支</span><br></pre></td></tr></table></figure><p>如果处于索引区的未提交内容及新添加文件，在checkckout时会移动到切换的新分支</p><p>如果所要切换的新分支的索引区也以及存在相同的修改文件，则会报错，此时解决方法：</p><p>①先提交后才能切换到新分支</p><p>②加数据存储到stash（临时存储）</p><h1 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h1><p>合并分支分为两种类型</p><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>特点： 保持修改内容的历史记录，历史记录复杂</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge branchName</span><br></pre></td></tr></table></figure><p>fast-forward:</p><p><img src="ff.png" alt="alt fast-forward"></p><p>non fast-forward:</p><p><img src="nff.png" alt="alt non fast-forward"></p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p>特点： 历史记录简单</p><p>操作：</p><ol><li><p>topic分支更新merge分支的最新内容，rebase</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase master</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>merge分支导入topic分支内容，先rabase后merge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout topic</span><br><span class="line">$ git rebase master</span><br><span class="line">$ git add .</span><br><span class="line">$ git rebase --<span class="built_in">continue</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge topic</span><br></pre></td></tr></table></figure></li></ol><p>rebase的时候，修改冲突后的提交不是使用commit命令，而是执行rebase命令指定 —continue选项。若要取消rebase，指定 —abort选项。</p><p><img src="rb1.png" alt="alt rb1"></p><p><img src="rb2.png" alt="alt rb2"></p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>轻标签：添加名称    </p><p>本地暂时或一次性使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag &lt;tagname&gt;  //添加轻标签</span><br><span class="line">$ git tag //显示标签列表</span><br></pre></td></tr></table></figure><p>注解标签：添加名称 添加注解 添加签名</p><p>一般发布时使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;tagname&gt; //添加注解标签  启动编辑区</span><br><span class="line">$ git tag -am <span class="string">"注解"</span> &lt;tagname&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d &lt;tagname&gt; //删除标签</span><br><span class="line">$ git tag -n //显示标签的列表和注解</span><br><span class="line">$ git <span class="built_in">log</span> --decorate //显示包含标签资料的历史记录</span><br></pre></td></tr></table></figure><h1 id="修改最近的提交"><a href="#修改最近的提交" class="headerlink" title="修改最近的提交"></a>修改最近的提交</h1><p>修改同一个分支最近的提交内容和注解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>主要作用：</p><pre><code>* 添加最近提交时漏掉的档案* 修改最近提交的注解</code></pre><h1 id="取消过去的提交"><a href="#取消过去的提交" class="headerlink" title="取消过去的提交"></a>取消过去的提交</h1><p>创建要否定的提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert HEAD</span><br></pre></td></tr></table></figure><p>主要作用：</p><ul><li>安全地取消过去发布的提交</li></ul><h1 id="遗弃提交"><a href="#遗弃提交" class="headerlink" title="遗弃提交"></a>遗弃提交</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD~~</span><br></pre></td></tr></table></figure><p>模式（默认mixed）</p><div class="table-container"><table><thead><tr><th style="text-align:center">模式名称</th><th style="text-align:center">HEAD的位置</th><th style="text-align:center">索引</th><th style="text-align:center">工作树</th></tr></thead><tbody><tr><td style="text-align:center">soft</td><td style="text-align:center">修改</td><td style="text-align:center">不修改</td><td style="text-align:center">不修改</td></tr><tr><td style="text-align:center">mixed</td><td style="text-align:center">修改</td><td style="text-align:center">修改</td><td style="text-align:center">不修改</td></tr><tr><td style="text-align:center">hard</td><td style="text-align:center">修改</td><td style="text-align:center">修改</td><td style="text-align:center">修改</td></tr></tbody></table></div><p>主要作用：</p><ul><li>复原修改过的索引的状态(mixed)</li><li>彻底取消最近的提交(hard)</li><li>只取消提交(soft)</li></ul><p>取消reset:</p><p>在reset之前的提交可以参照ORIG_HEAD。Reset错误的时候，在ORIG_HEAD上reset 就可以还原到reset前的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard ORIG_HEAD</span><br></pre></td></tr></table></figure><h1 id="提取提交"><a href="#提取提交" class="headerlink" title="提取提交"></a>提取提交</h1><p>把topic中的某个提交移动到master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git cherry-pick 99dead2(提交记录commit  可在<span class="built_in">log</span>中查找到)</span><br></pre></td></tr></table></figure><p>主要作用：</p><ul><li>把弄错分支的提交移动到正确的地方</li><li>从其他分支复制指定的提交，然后导入到现在的分支</li></ul><h1 id="改写提交的历史记录"><a href="#改写提交的历史记录" class="headerlink" title="改写提交的历史记录"></a>改写提交的历史记录</h1><p>改写、替换、删除或合并提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~~</span><br><span class="line"></span><br><span class="line">进入编辑器（显示从HEAD到HEAD~~之间的提交记录【包括HEAD，不包括HEAD~~】）</span><br><span class="line"></span><br><span class="line">pick 9a54fd4 添加commit的说明</span><br><span class="line">pick 0d4a808 添加pull的说明</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 326fc9f..0d4a808 onto d286baa</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment">#  p, pick = use commit</span></span><br><span class="line"><span class="comment">#  r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment">#  e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment">#  f, fixup = like "squash", but discard this commit's log message</span></span><br><span class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">//汇合过去的两次提交：把第二行pick改为squash</span><br><span class="line">//合并后显示提交信息编辑器</span><br><span class="line"></span><br><span class="line">//修改最近一次提交：把第一行pick改为edit  后修改过的提交呈现退出状态  </span><br><span class="line">//打开此次提交的文件，适当修改这次提交的内容 </span><br><span class="line">//git add sample.txt</span><br><span class="line">//git commit --amend</span><br><span class="line">//git rebase --<span class="built_in">continue</span></span><br><span class="line">//可能出现冲突，修改冲突内容后再add 和  rebase --<span class="built_in">continue</span> 无需再次commit</span><br><span class="line">//若要中途停止rebase:rebase --abort</span><br><span class="line"></span><br><span class="line">//多个edit  重复执行上面操作</span><br><span class="line"></span><br><span class="line">//可以用git reset --hard ORIG_HEAD复原到rebase之前的状态</span><br></pre></td></tr></table></figure><p>主要作用：</p><ul><li>在push之前，重新输入正确的提交注解</li><li>清楚地汇合内容含义相同的提交。</li><li>添加最近提交时漏掉的档案</li></ul><h1 id="汇合分支上的提交，然后一同合并到分支"><a href="#汇合分支上的提交，然后一同合并到分支" class="headerlink" title="汇合分支上的提交，然后一同合并到分支"></a>汇合分支上的提交，然后一同合并到分支</h1><p>merge的特殊选项: squash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge --squash issue1</span><br></pre></td></tr></table></figure><p><img src="squash.png" alt="alt squash"></p><h1 id="Git的标准注解："><a href="#Git的标准注解：" class="headerlink" title="Git的标准注解："></a>Git的标准注解：</h1><p>第一行： 提交修改内容的摘要</p><p>第二行： 空行</p><p>第三行以后： 修改的理由</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li>让Git以彩色显示</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure><ol><li>使用命令行(Git Bash)让含非ASCII字符的文件名正确显示</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.quotepath off</span><br></pre></td></tr></table></figure><ol><li><p>若在Windows使用命令行，您只能输入ASCII字符。所以，如果您的提交信息包含非ASCII字符，请不要使用-m选项，而要用外部编辑器输入。</p><p>外部编辑器必须能与字符编码UTF-8和换行码LF兼容。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor <span class="string">"\"[使用编辑区的路径]\""</span></span><br></pre></td></tr></table></figure><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>不同类别的修改 (如：Bug修复和功能添加) 要尽量分开提交，以方便以后从历史记录里查找特定的修改内容。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol><li><p>github无法访问或者访问速度慢</p><p>解决方法：<a href="https://zhuanlan.zhihu.com/p/114306238" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/114306238</a></p></li><li><p>使用git clone出现下列错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">remote: Enumerating objects: 832, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (832/832), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (484/484), <span class="keyword">done</span>.</span><br><span class="line">error: RPC failed; curl 56 OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure></li></ol><p>   解决方法： </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config http.sslVerify <span class="string">"false"</span></span><br></pre></td></tr></table></figure><ol><li><p>管理不同的git账号（gitlab、github、gitee等）</p><ul><li><p>全局name和email不设置</p></li><li><p>为不同的账号配置不同的ssh（生成SSH时用不同的文件名）</p></li><li><p>在SSH存放文件下添加config文件</p><p>config设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;github_id_rsa</span><br><span class="line">User yourusername</span><br><span class="line"> </span><br><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">User yourusername</span><br></pre></td></tr></table></figure><p>最后SSH文件夹如下：</p><p><img src="config.png" alt="alt config"></p></li><li><p>name、email本地仓库局部设置(独立分开，不同的项目根据需要设置不同的远程仓库和账号)</p></li></ul></li></ol><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>笔记撰写: GroovyKetchup</p><p>部分图片来源于：猴子都能懂的GIT入门(backlog)</p><p>更加详细的git教程可以访问：<a href="https://backlog.com/git-tutorial/cn/intro/intro1_1.html" target="_blank" rel="noopener">https://backlog.com/git-tutorial/cn/intro/intro1_1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie</title>
      <link href="2021/02/28/cookie/"/>
      <url>2021/02/28/cookie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下内容均基于nodejs的express框架进行描述</p></blockquote><h1 id="cookie的获取和设置"><a href="#cookie的获取和设置" class="headerlink" title="cookie的获取和设置"></a>cookie的获取和设置</h1><p>nodejs安装cookie-parser,用于解析cookie</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i cookie-parser </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line">app.use(cookieParser());</span><br></pre></td></tr></table></figure><p>以登录接口为例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;登录</span><br><span class="line">app.post(&#39;&#x2F;login&#39;,(req,res) &#x3D;&gt; &#123;</span><br><span class="line">    res.cookie(&#39;add&#39;,&#39;add&#39;,&#123;maxAge: 900000,httpOnly: true&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;检验登录</span><br><span class="line">app.get(&#39;&#x2F;loginCheck&#39;,(req,res) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(req.cookies.add);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="showCookie.png" alt="alt cookie"></p><h1 id="跨域请求情况下的cookie"><a href="#跨域请求情况下的cookie" class="headerlink" title="跨域请求情况下的cookie"></a>跨域请求情况下的cookie</h1><p><strong>ajax同源请求默认是会自动带上cookie,ajax跨域请求默认是不会自动带上cookie</strong></p><p>需要采取下列方法(基于CORS)：</p><p>前端请求需设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">jquery: $ajax(&#123;<span class="attr">xhrFields</span>:&#123;<span class="attr">withCredentials</span>:<span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>服务器需设置header：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//允许客户端发送自定义请求头  最好不要设置成通配符样式，而要设置成白名单</span></span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Headers'</span>,<span class="string">'a'</span>);</span><br><span class="line">    <span class="comment">//允许前端获取响应头  这个响应头最好不要设置成通配符样式，而要设置成白名单</span></span><br><span class="line">    res.header(<span class="string">'Access-Control-Expose-Headers'</span>,<span class="string">'b'</span>)</span><br><span class="line">    <span class="comment">//允许哪些客户端可以访问服务器   此时Access-Control-Allow-Origin不能为*（星号）了，必须是白名单样式</span></span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Origin'</span>,<span class="string">'http://localhost:3000'</span>);</span><br><span class="line">    <span class="comment">//允许客户端以哪种方式访问服务器</span></span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Methods'</span>,<span class="string">'get,post'</span>);</span><br><span class="line">    <span class="comment">//跨域带cookie</span></span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Credentials'</span>,<span class="literal">true</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可借助cors插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//enable all cors request</span></span><br><span class="line">app.use(cors(&#123;</span><br><span class="line">      allowedHeaders: <span class="string">'a'</span>,</span><br><span class="line">      exposedHeaders: <span class="string">'b'</span>,</span><br><span class="line">      credentials: <span class="literal">true</span>,</span><br><span class="line">      methods： <span class="string">'GET'</span>,</span><br><span class="line">      origin: <span class="string">'http://localhost；3000'</span>  <span class="comment">//不设的话 默认为*</span></span><br><span class="line">    &#125;))</span><br><span class="line">    </span><br><span class="line"><span class="comment">//enable cors for single route</span></span><br><span class="line">app.use(<span class="string">'/get'</span>,cors(),(req,res,next) =&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise</title>
      <link href="2021/02/20/promise/"/>
      <url>2021/02/20/promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise介绍"><a href="#Promise介绍" class="headerlink" title="Promise介绍"></a>Promise介绍</h1><p>简单来说就是一个容器，里面保存着某个未来才会结束的时间(通常是一个异步操作的结果)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h1 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h1><blockquote><p>所有的promise实例都具有这个方法</p></blockquote><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fnc1 =&gt; resolve回调函数   func2 =&gt; reject回调函数 </span></span><br><span class="line">p.then(func1,func2) </span><br><span class="line">p.then(func1) </span><br><span class="line">p.then(<span class="literal">null</span>,func2)  ==  <span class="keyword">catch</span>()</span><br></pre></td></tr></table></figure><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><ol><li>错误具有冒泡性质，所以catch可以捕获前面所有的错误 </li><li>catch也可以再抛出错误</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h2><p>ES2018</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.then().catch().finally()</span><br></pre></td></tr></table></figure><h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h1><p>传入Promise实例数组，不是promise实例，也会被promise.resolve()转换为promis实例 最后包装成一个新的实例 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1,p2,p3])</span><br></pre></td></tr></table></figure><ol><li><p>数组实例状态全为fulfilled，才为fulfilled，将数组的本身传给resolve回调 的参数以数组的方式传给all实例 </p></li><li><p>数组中一个为rejected，则为rejected,第一个rejected参数传进 </p></li><li><p>作为参数的promise有catch，则rejected时不会触发all的catch，而是将自身catch 后的参数添加进数组传给all</p></li></ol><h1 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h1><p>跟随第一个状态改变 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1,p2,p3])</span><br></pre></td></tr></table></figure><p>实例： 请求超时报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([</span><br><span class="line">  fetch(<span class="string">'/resource-that-may-take-a-while'</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'request timeout'</span>)), <span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.then(<span class="built_in">console</span>.log)</span><br><span class="line">.catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><h1 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h1><p>ES2020</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.allSettled([p1,p2,p3])</span><br><span class="line"></span><br><span class="line">当传入的数组实例的状态改变完成后，状态变成fulfilled，不会变成rejected</span><br><span class="line"></span><br><span class="line">传入的参数如下：</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    &#123; status: 'fulfilled', value: 42 &#125;,</span></span><br><span class="line"><span class="comment">//    &#123; status: 'rejected', reason: -1 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h1 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a><strong>Promise.any()</strong></h1><p>ES2021</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.any([p1,p2,p3]])</span><br></pre></td></tr></table></figure><p>1.至少一个为fulfilled，才为fulfilled<br>2.全为rejected，才为rejected<br>3.Promise.any()抛出的错误，不是一个一般的错误，而是一个 AggregateError 实例</p><h1 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a><strong>Promise.resolve()</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">将现有对象转换为promise对象</span><br><span class="line">等同于：<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve())</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>参数是promise实例，则直接输出</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>参数是一个thenable对象，转换为promise对象后立即执行then方法</span><br><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">42</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(thenable);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);  <span class="comment">// 42</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>参数不具有then()方法的对象，或则根本不是对象</span><br><span class="line">返回一个新的promise对象，状态为resolved，回调函数会立即执行</span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>不带有任何参数</span><br><span class="line">返回新的状态为resolved的promise对象</span><br></pre></td></tr></table></figure><p>注意点：立即resolve()的promise对象，是在本轮“事件循环”的结束时执行，而不是在下一轮“事件循环”的开始时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'three'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure><h1 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a><strong>Promise.reject()</strong></h1><p>返回状态为rejected的promise实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">等同于<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">reject</span> =&gt;</span> reject())</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject()方法的参数，会作为reject的理由，变成后续方法的参数</span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e === <span class="string">'出错了'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Promise-try"><a href="#Promise-try" class="headerlink" title="Promise.try()"></a><strong>Promise.try()</strong></h1><p>利用promise指定then下一步流程，同步函数同步执行，异步函数异步执行<br>(Promise里面的是可以同步函数同步执行，但是then和catch都是异步)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">async</span>方法：</span><br><span class="line">同步：</span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>)</span><br><span class="line">(<span class="keyword">async</span> () =&gt; f())();</span><br><span class="line"><span class="built_in">console</span>,log(<span class="string">'next'</span>);</span><br><span class="line"></span><br><span class="line">异步：</span><br><span class="line">(<span class="keyword">async</span> () =&gt; f())().then().catch()</span><br><span class="line"></span><br><span class="line"><span class="number">2.n</span>ew <span class="built_in">Promise</span>()</span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>)</span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(f())))()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="built_in">Promise</span>.try()</span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'now'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.try(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.try(<span class="function"><span class="params">()</span> =&gt;</span> database.users.get(&#123;<span class="attr">id</span>: userId&#125;))</span><br><span class="line">  .then(...)</span><br><span class="line">  .catch(...)</span><br></pre></td></tr></table></figure><blockquote><p>resolove（包括Promise.reolve()）回调都是在本轮事件循环末尾时执行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
